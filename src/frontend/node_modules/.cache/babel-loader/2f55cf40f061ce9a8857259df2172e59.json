{"ast":null,"code":"var _jsxFileName = \"/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Graph = geoCode => {\n  _s();\n\n  const [healthWard, setHealthWard] = useState(null);\n  const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n  console.log(`${url}${geoCode}`);\n\n  const getHealthWard = geoCode => {\n    axios.get(`${url}${geoCode}`).then(response => {\n      console.log(response.data);\n      setHealthWard(response.data);\n    }).catch(error => console.error(`Error: ${error}`));\n  };\n\n  useEffect(geoCode => {\n    getHealthWard(geoCode);\n  });\n\n  const toString = date => {\n    const day = date[1];\n    const month = date[2];\n    const year = date[0];\n    return day + \"/\" + month + \"/\" + year;\n  };\n\n  const dailyRecords = healthWard != null ? healthWard.dailyRecords : null;\n  const labels = dailyRecords != null ? dailyRecords.map(dailyRecord => toString(dailyRecord.date)) : [];\n  const data = dailyRecords != null ? dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases) : [];\n\n  if (geoCode !== null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        width: 400,\n        height: 400,\n        data: {\n          labels: {\n            labels\n          },\n          datasets: [{\n            label: \"Cases Last Two Weeks\",\n            hoverBackgroundColor: \"red\",\n            backgroundColor: \"pink\",\n            data: {\n              data\n            },\n            barThickness: \"flex\"\n          }]\n        },\n        options: {\n          maintainAspectRatio: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Graph, \"qiiz/t5WXiCgLNCUH1/ThJMngds=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js"],"names":["React","useState","useEffect","Bar","axios","Graph","geoCode","healthWard","setHealthWard","url","console","log","getHealthWard","get","then","response","data","catch","error","toString","date","day","month","year","dailyRecords","labels","map","dailyRecord","twoWeekCases","datasets","label","hoverBackgroundColor","backgroundColor","barThickness","maintainAspectRatio"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,KAAK,GAAIC,OAAD,IAAa;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMQ,GAAG,GAAG,uFAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,GAAI,GAAEH,OAAQ,EAA7B;;AAEA,QAAMM,aAAa,GAAIN,OAAD,IAAa;AAC/BF,IAAAA,KAAK,CAACS,GAAN,CAAW,GAAEJ,GAAI,GAAEH,OAAQ,EAA3B,EACCQ,IADD,CACOC,QAAQ,IAAI;AACfL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB;AACAR,MAAAA,aAAa,CAACO,QAAQ,CAACC,IAAV,CAAb;AACH,KAJD,EAKCC,KALD,CAKQC,KAAK,IAAIR,OAAO,CAACQ,KAAR,CAAe,UAASA,KAAM,EAA9B,CALjB;AAMH,GAPD;;AASAhB,EAAAA,SAAS,CAAEI,OAAO,IAAI;AAClBM,IAAAA,aAAa,CAACN,OAAD,CAAb;AACH,GAFQ,CAAT;;AAIA,QAAMa,QAAQ,GAAIC,IAAD,IAAU;AACvB,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAME,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMG,IAAI,GAAGH,IAAI,CAAC,CAAD,CAAjB;AACA,WAAOC,GAAG,GAAG,GAAN,GAAYC,KAAZ,GAAoB,GAApB,GAA0BC,IAAjC;AACH,GALD;;AAOA,QAAMC,YAAY,GAAGjB,UAAU,IAAI,IAAd,GAAqBA,UAAU,CAACiB,YAAhC,GAA+C,IAApE;AAEA,QAAMC,MAAM,GAAGD,YAAY,IAAI,IAAhB,GAAuBA,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIR,QAAQ,CAACQ,WAAW,CAACP,IAAb,CAAxC,CAAvB,GAAqF,EAApG;AAEA,QAAMJ,IAAI,GAAGQ,YAAY,IAAI,IAAhB,GAAuBA,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIA,WAAW,CAACC,YAA5C,CAAvB,GAAmF,EAAhG;;AAGA,MAAItB,OAAO,KAAK,IAAhB,EAAsB;AAClB,wBACI;AAAA,6BACI,QAAC,GAAD;AACI,QAAA,KAAK,EAAE,GADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,IAAI,EAAE;AACFmB,UAAAA,MAAM,EAAE;AAACA,YAAAA;AAAD,WADN;AAEFI,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,sBADA;AAEPC,YAAAA,oBAAoB,EAAE,KAFf;AAGPC,YAAAA,eAAe,EAAE,MAHV;AAIPhB,YAAAA,IAAI,EAAE;AAACA,cAAAA;AAAD,aAJC;AAKPiB,YAAAA,YAAY,EAAE;AALP,WAAD;AAFR,SAHV;AAcI,QAAA,OAAO,EAAE;AACLC,UAAAA,mBAAmB,EAAE;AADhB;AAdb;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAuBH;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhED;;GAAM7B,K;;KAAAA,K;AAkEN,eAAeA,KAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\n\nconst Graph = (geoCode) => {\n    const [healthWard, setHealthWard] = useState(null);\n\n    const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n\n    console.log(`${url}${geoCode}`);\n\n    const getHealthWard = (geoCode) => {\n        axios.get(`${url}${geoCode}`)\n        .then( response => {\n            console.log(response.data);\n            setHealthWard(response.data);\n        })\n        .catch( error => console.error(`Error: ${error}`))\n    }\n\n    useEffect( geoCode => {\n        getHealthWard(geoCode);\n    });   \n\n    const toString = (date) => {\n        const day = date[1];\n        const month = date[2];\n        const year = date[0];\n        return day + \"/\" + month + \"/\" + year;\n    }\n\n    const dailyRecords = healthWard != null ? healthWard.dailyRecords : null;\n    \n    const labels = dailyRecords != null ? dailyRecords.map(dailyRecord => toString(dailyRecord.date)) : [];\n    \n    const data = dailyRecords != null ? dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases) : [];\n    \n\n    if (geoCode !== null) {\n        return (\n            <>\n                <Bar\n                    width={400}\n                    height={400}\n                    data={{\n                        labels: {labels},\n                        datasets: [{\n                            label: \"Cases Last Two Weeks\",\n                            hoverBackgroundColor: \"red\",\n                            backgroundColor: \"pink\",\n                            data: {data},\n                            barThickness: \"flex\",\n                        }]\n                        \n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                    }}\n                    \n                />\n                </>\n        );\n    }\n    return (\n        <div></div>\n    );\n\n\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}