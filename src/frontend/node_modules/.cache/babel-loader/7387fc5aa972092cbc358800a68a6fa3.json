{"ast":null,"code":"var _jsxFileName = \"/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Graph = geoCode => {\n  _s();\n\n  const [data, setData] = useState({});\n  const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n  console.log(`${url}${geoCode}`);\n\n  const getData = geoCode => {\n    axios.get(`${url}${geoCode}`).then(response => {\n      console.log(response.data);\n      setData(response.data);\n    }).catch(error => console.error(`Error: ${error}`));\n  };\n\n  useEffect(geoCode => {\n    getData(geoCode);\n  });\n\n  const toString = date => {\n    const day = date[1];\n    const month = date[2];\n    const year = date[0];\n    return day + \"/\" + month + \"/\" + year;\n  };\n\n  const dailyRecords = data.dailyRecords;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      width: 400,\n      height: 400,\n      data: {\n        labels: dailyRecords.map(dailyRecord => toString(dailyRecord.date)),\n        datasets: [{\n          label: \"Cases Last Two Weeks\",\n          hoverBackgroundColor: \"red\",\n          backgroundColor: \"pink\",\n          data: dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases),\n          barThickness: \"flex\"\n        }]\n      },\n      options: {\n        maintainAspectRatio: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Graph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js"],"names":["React","useState","useEffect","Bar","axios","Graph","geoCode","data","setData","url","console","log","getData","get","then","response","catch","error","toString","date","day","month","year","dailyRecords","labels","map","dailyRecord","datasets","label","hoverBackgroundColor","backgroundColor","twoWeekCases","barThickness","maintainAspectRatio"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,KAAK,GAAIC,OAAD,IAAa;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMQ,GAAG,GAAG,uFAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,GAAI,GAAEH,OAAQ,EAA7B;;AAEA,QAAMM,OAAO,GAAIN,OAAD,IAAa;AACzBF,IAAAA,KAAK,CAACS,GAAN,CAAW,GAAEJ,GAAI,GAAEH,OAAQ,EAA3B,EACCQ,IADD,CACOC,QAAQ,IAAI;AACfL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACR,IAArB;AACAC,MAAAA,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;AACH,KAJD,EAKCS,KALD,CAKQC,KAAK,IAAIP,OAAO,CAACO,KAAR,CAAe,UAASA,KAAM,EAA9B,CALjB;AAMH,GAPD;;AASAf,EAAAA,SAAS,CAAEI,OAAO,IAAI;AAClBM,IAAAA,OAAO,CAACN,OAAD,CAAP;AACH,GAFQ,CAAT;;AAIA,QAAMY,QAAQ,GAAIC,IAAD,IAAU;AACvB,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAME,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMG,IAAI,GAAGH,IAAI,CAAC,CAAD,CAAjB;AACA,WAAOC,GAAG,GAAG,GAAN,GAAYC,KAAZ,GAAoB,GAApB,GAA0BC,IAAjC;AACH,GALD;;AAOA,QAAMC,YAAY,GAAGhB,IAAI,CAACgB,YAA1B;AAEA,sBACI;AAAA,2BACA,QAAC,GAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAED,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIR,QAAQ,CAACQ,WAAW,CAACP,IAAb,CAAxC,CADN;AAEFQ,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,sBADA;AAEPC,UAAAA,oBAAoB,EAAE,KAFf;AAGPC,UAAAA,eAAe,EAAE,MAHV;AAIPvB,UAAAA,IAAI,EAAEgB,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIA,WAAW,CAACK,YAA5C,CAJC;AAKPC,UAAAA,YAAY,EAAE;AALP,SAAD;AAFR,OAHV;AAcI,MAAA,OAAO,EAAE;AACLC,QAAAA,mBAAmB,EAAE;AADhB;AAdb;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAyBH,CAtDD;;GAAM5B,K;;KAAAA,K;AAwDN,eAAeA,KAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\n\nconst Graph = (geoCode) => {\n    const [data, setData] = useState({});\n\n    const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n\n    console.log(`${url}${geoCode}`);\n\n    const getData = (geoCode) => {\n        axios.get(`${url}${geoCode}`)\n        .then( response => {\n            console.log(response.data);\n            setData(response.data);\n        })\n        .catch( error => console.error(`Error: ${error}`))\n    }\n\n    useEffect( geoCode => {\n        getData(geoCode);\n    });   \n\n    const toString = (date) => {\n        const day = date[1];\n        const month = date[2];\n        const year = date[0];\n        return day + \"/\" + month + \"/\" + year;\n    }\n\n    const dailyRecords = data.dailyRecords;\n\n    return (\n        <>\n        <Bar\n            width={400}\n            height={400}\n            data={{\n                labels: dailyRecords.map(dailyRecord => toString(dailyRecord.date)),\n                datasets: [{\n                    label: \"Cases Last Two Weeks\",\n                    hoverBackgroundColor: \"red\",\n                    backgroundColor: \"pink\",\n                    data: dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases),\n                    barThickness: \"flex\",\n                }]\n                \n            }}\n            options={{\n                maintainAspectRatio: false,\n            }}\n            \n        />\n        </>\n    );\n\n\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}