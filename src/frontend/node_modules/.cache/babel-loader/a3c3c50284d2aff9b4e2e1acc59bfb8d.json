{"ast":null,"code":"var _jsxFileName = \"/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport GraphUI from './GraphUI.js';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph = geoCode => {\n  _s();\n\n  const [healthWard, setHealthWard] = useState(null);\n  const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n  useEffect(() => {\n    async function getHealthWard(geoCode) {\n      console.log(url.concat(geoCode.geoCode));\n      await axios.get(url.concat(geoCode.geoCode)).then(response => {\n        console.log(response.data);\n        setHealthWard(response.data);\n      }).catch(error => console.error(`Error: ${error}`));\n    }\n\n    getHealthWard();\n  }, []);\n  var dailyRecords = healthWard.dailyRecords;\n  var labels = dailyRecords.map(dailyRecord => toString(dailyRecord.date));\n  var figures = dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases);\n\n  const toString = date => {\n    const day = date[1];\n    const month = date[2];\n    const year = date[0];\n    return day + \"/\" + month + \"/\" + year;\n  };\n\n  if (healthWard !== null) {\n    return /*#__PURE__*/_jsxDEV(GraphUI, {\n      labels: labels,\n      figures: figures\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Graph, \"qiiz/t5WXiCgLNCUH1/ThJMngds=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js"],"names":["React","useState","useEffect","GraphUI","axios","Graph","geoCode","healthWard","setHealthWard","url","getHealthWard","console","log","concat","get","then","response","data","catch","error","dailyRecords","labels","map","dailyRecord","toString","date","figures","twoWeekCases","day","month","year"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAK,GAAIC,OAAD,IAAa;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMQ,GAAG,GAAG,uFAAZ;AAEAP,EAAAA,SAAS,CAAE,MAAM;AACb,mBAAeQ,aAAf,CAA6BJ,OAA7B,EAAsC;AAClCK,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,MAAJ,CAAWP,OAAO,CAACA,OAAnB,CAAZ;AACA,YAAMF,KAAK,CAACU,GAAN,CAAUL,GAAG,CAACI,MAAJ,CAAWP,OAAO,CAACA,OAAnB,CAAV,EACDS,IADC,CACKC,QAAQ,IAAI;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB;AACAT,QAAAA,aAAa,CAACQ,QAAQ,CAACC,IAAV,CAAb;AACH,OAJC,EAKDC,KALC,CAKMC,KAAK,IAAIR,OAAO,CAACQ,KAAR,CAAe,UAASA,KAAM,EAA9B,CALf,CAAN;AAMH;;AACDT,IAAAA,aAAa;AAChB,GAXQ,EAWN,EAXM,CAAT;AAaA,MAAIU,YAAY,GAAGb,UAAU,CAACa,YAA9B;AACA,MAAIC,MAAM,GAAGD,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIC,QAAQ,CAACD,WAAW,CAACE,IAAb,CAAxC,CAAb;AACA,MAAIC,OAAO,GAAGN,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIA,WAAW,CAACI,YAA5C,CAAd;;AAEA,QAAMH,QAAQ,GAAIC,IAAD,IAAU;AACvB,UAAMG,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAhB;AACA,UAAMI,KAAK,GAAGJ,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMK,IAAI,GAAGL,IAAI,CAAC,CAAD,CAAjB;AACA,WAAOG,GAAG,GAAG,GAAN,GAAYC,KAAZ,GAAoB,GAApB,GAA0BC,IAAjC;AACH,GALD;;AAOA,MAAIvB,UAAU,KAAK,IAAnB,EAAyB;AACrB,wBACI,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEc,MAAjB;AAAyB,MAAA,OAAO,EAAEK;AAAlC;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ,CAlCD;;GAAMrB,K;;KAAAA,K;AAoCN,eAAeA,KAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport GraphUI from './GraphUI.js';\nimport axios from 'axios';\n\nconst Graph = (geoCode) => {\n    const [healthWard, setHealthWard] = useState(null);\n\n    const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n\n    useEffect( () => {\n        async function getHealthWard(geoCode) {\n            console.log(url.concat(geoCode.geoCode));\n            await axios.get(url.concat(geoCode.geoCode))\n                .then( response => {\n                    console.log(response.data);\n                    setHealthWard(response.data);\n                })\n                .catch( error => console.error(`Error: ${error}`))\n        }\n        getHealthWard();\n    }, []);\n    \n    var dailyRecords = healthWard.dailyRecords;\n    var labels = dailyRecords.map(dailyRecord => toString(dailyRecord.date));\n    var figures = dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases);\n\n    const toString = (date) => {\n        const day = date[1];\n        const month = date[2];\n        const year = date[0];\n        return day + \"/\" + month + \"/\" + year;\n    }\n\n    if (healthWard !== null) {\n        return (\n            <GraphUI labels={labels} figures={figures} />\n        );\n    }\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}