{"ast":null,"code":"var _jsxFileName = \"/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Graph = geoCode => {\n  _s();\n\n  const [healthWard, setHealthWard] = useState(null);\n  const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n\n  const getHealthWard = geoCode => {\n    const urlGeoCode = url + geoCode;\n    console.log(urlGeoCode);\n    axios.get(urlGeoCode).then(response => {\n      console.log(response.data);\n      setHealthWard(response.data);\n    }).catch(error => console.error(`Error: ${error}`));\n  };\n\n  useEffect(geoCode => {\n    getHealthWard(geoCode);\n  });\n\n  const toString = date => {\n    const day = date[1];\n    const month = date[2];\n    const year = date[0];\n    return day + \"/\" + month + \"/\" + year;\n  };\n\n  var dailyRecords = healthWard.dailyRecords;\n  var labels = dailyRecords.map(dailyRecord => toString(dailyRecord.date));\n  var data = dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases);\n\n  if (geoCode != '') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        width: 400,\n        height: 400,\n        data: {\n          labels: {\n            labels\n          },\n          datasets: [{\n            label: \"Cases Last Two Weeks\",\n            hoverBackgroundColor: \"red\",\n            backgroundColor: \"pink\",\n            data: {\n              data\n            },\n            barThickness: \"flex\"\n          }]\n        },\n        options: {\n          maintainAspectRatio: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Graph, \"qiiz/t5WXiCgLNCUH1/ThJMngds=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/chris/Development/covidradar/src/frontend/src/Components/Graph.js"],"names":["React","useState","useEffect","Bar","axios","Graph","geoCode","healthWard","setHealthWard","url","getHealthWard","urlGeoCode","console","log","get","then","response","data","catch","error","toString","date","day","month","year","dailyRecords","labels","map","dailyRecord","twoWeekCases","datasets","label","hoverBackgroundColor","backgroundColor","barThickness","maintainAspectRatio"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,KAAK,GAAIC,OAAD,IAAa;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMQ,GAAG,GAAG,uFAAZ;;AAEA,QAAMC,aAAa,GAAIJ,OAAD,IAAa;AAC/B,UAAMK,UAAU,GAAGF,GAAG,GAAGH,OAAzB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAP,IAAAA,KAAK,CAACU,GAAN,CAAUH,UAAV,EACCI,IADD,CACOC,QAAQ,IAAI;AACfJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACC,IAArB;AACAT,MAAAA,aAAa,CAACQ,QAAQ,CAACC,IAAV,CAAb;AACH,KAJD,EAKCC,KALD,CAKQC,KAAK,IAAIP,OAAO,CAACO,KAAR,CAAe,UAASA,KAAM,EAA9B,CALjB;AAMH,GATD;;AAWAjB,EAAAA,SAAS,CAAEI,OAAO,IAAI;AAClBI,IAAAA,aAAa,CAACJ,OAAD,CAAb;AACH,GAFQ,CAAT;;AAIA,QAAMc,QAAQ,GAAIC,IAAD,IAAU;AACvB,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAME,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;AACA,UAAMG,IAAI,GAAGH,IAAI,CAAC,CAAD,CAAjB;AACA,WAAOC,GAAG,GAAG,GAAN,GAAYC,KAAZ,GAAoB,GAApB,GAA0BC,IAAjC;AACH,GALD;;AAOA,MAAIC,YAAY,GAAGlB,UAAU,CAACkB,YAA9B;AAEA,MAAIC,MAAM,GAAGD,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIR,QAAQ,CAACQ,WAAW,CAACP,IAAb,CAAxC,CAAb;AAEA,MAAIJ,IAAI,GAAGQ,YAAY,CAACE,GAAb,CAAiBC,WAAW,IAAIA,WAAW,CAACC,YAA5C,CAAX;;AAGA,MAAIvB,OAAO,IAAI,EAAf,EAAmB;AACf,wBACI;AAAA,6BACI,QAAC,GAAD;AACI,QAAA,KAAK,EAAE,GADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,IAAI,EAAE;AACFoB,UAAAA,MAAM,EAAE;AAACA,YAAAA;AAAD,WADN;AAEFI,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,sBADA;AAEPC,YAAAA,oBAAoB,EAAE,KAFf;AAGPC,YAAAA,eAAe,EAAE,MAHV;AAIPhB,YAAAA,IAAI,EAAE;AAACA,cAAAA;AAAD,aAJC;AAKPiB,YAAAA,YAAY,EAAE;AALP,WAAD;AAFR,SAHV;AAcI,QAAA,OAAO,EAAE;AACLC,UAAAA,mBAAmB,EAAE;AADhB;AAdb;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAuBH,GAxBD,MAwBO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AAGJ,CAnED;;GAAM9B,K;;KAAAA,K;AAqEN,eAAeA,KAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport axios from 'axios';\n\nconst Graph = (geoCode) => {\n    const [healthWard, setHealthWard] = useState(null);\n\n    const url = 'http://covidradarmadrid-env.eba-wbgad2ub.eu-south-1.elasticbeanstalk.com/api/geocode/';\n\n    const getHealthWard = (geoCode) => {\n        const urlGeoCode = url + geoCode;\n        console.log(urlGeoCode);\n        axios.get(urlGeoCode)\n        .then( response => {\n            console.log(response.data);\n            setHealthWard(response.data);\n        })\n        .catch( error => console.error(`Error: ${error}`))\n    }\n\n    useEffect( geoCode => {\n        getHealthWard(geoCode);\n    });   \n\n    const toString = (date) => {\n        const day = date[1];\n        const month = date[2];\n        const year = date[0];\n        return day + \"/\" + month + \"/\" + year;\n    }\n\n    var dailyRecords = healthWard.dailyRecords;\n    \n    var labels = dailyRecords.map(dailyRecord => toString(dailyRecord.date));\n    \n    var data = dailyRecords.map(dailyRecord => dailyRecord.twoWeekCases);\n    \n\n    if (geoCode != '') {\n        return (\n            <>\n                <Bar\n                    width={400}\n                    height={400}\n                    data={{\n                        labels: {labels},\n                        datasets: [{\n                            label: \"Cases Last Two Weeks\",\n                            hoverBackgroundColor: \"red\",\n                            backgroundColor: \"pink\",\n                            data: {data},\n                            barThickness: \"flex\",\n                        }]\n                        \n                    }}\n                    options={{\n                        maintainAspectRatio: false,\n                    }}\n                    \n                />\n            </>\n        );\n    } else {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n\n\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}